// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	douyin_message "github.com/1037group/dousheng/kitex_gen/douyin_message"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*douyin_message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MessageChat":      kitex.NewMethodInfo(messageChatHandler, newMessageServiceMessageChatArgs, newMessageServiceMessageChatResult, false),
		"MessageAction":    kitex.NewMethodInfo(messageActionHandler, newMessageServiceMessageActionArgs, newMessageServiceMessageActionResult, false),
		"MessageSetUnRead": kitex.NewMethodInfo(messageSetUnReadHandler, newMessageServiceMessageSetUnReadArgs, newMessageServiceMessageSetUnReadResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin_message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyin_message.MessageServiceMessageChatArgs)
	realResult := result.(*douyin_message.MessageServiceMessageChatResult)
	success, err := handler.(douyin_message.MessageService).MessageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageChatArgs() interface{} {
	return douyin_message.NewMessageServiceMessageChatArgs()
}

func newMessageServiceMessageChatResult() interface{} {
	return douyin_message.NewMessageServiceMessageChatResult()
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyin_message.MessageServiceMessageActionArgs)
	realResult := result.(*douyin_message.MessageServiceMessageActionResult)
	success, err := handler.(douyin_message.MessageService).MessageAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageActionArgs() interface{} {
	return douyin_message.NewMessageServiceMessageActionArgs()
}

func newMessageServiceMessageActionResult() interface{} {
	return douyin_message.NewMessageServiceMessageActionResult()
}

func messageSetUnReadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyin_message.MessageServiceMessageSetUnReadArgs)
	realResult := result.(*douyin_message.MessageServiceMessageSetUnReadResult)
	success, err := handler.(douyin_message.MessageService).MessageSetUnRead(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageSetUnReadArgs() interface{} {
	return douyin_message.NewMessageServiceMessageSetUnReadArgs()
}

func newMessageServiceMessageSetUnReadResult() interface{} {
	return douyin_message.NewMessageServiceMessageSetUnReadResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageChat(ctx context.Context, req *douyin_message.MessageChatRequest) (r *douyin_message.MessageChatResponse, err error) {
	var _args douyin_message.MessageServiceMessageChatArgs
	_args.Req = req
	var _result douyin_message.MessageServiceMessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageAction(ctx context.Context, req *douyin_message.MessageActionRequest) (r *douyin_message.MessageActionResponse, err error) {
	var _args douyin_message.MessageServiceMessageActionArgs
	_args.Req = req
	var _result douyin_message.MessageServiceMessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageSetUnRead(ctx context.Context, req *douyin_message.MessageSetUnReadRequest) (r *douyin_message.MessageSetUnReadResponse, err error) {
	var _args douyin_message.MessageServiceMessageSetUnReadArgs
	_args.Req = req
	var _result douyin_message.MessageServiceMessageSetUnReadResult
	if err = p.c.Call(ctx, "MessageSetUnRead", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
