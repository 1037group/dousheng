// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	douyin_relation "github.com/1037group/dousheng/kitex_gen/douyin_relation"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*douyin_relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":     kitex.NewMethodInfo(relationActionHandler, newRelationServiceRelationActionArgs, newRelationServiceRelationActionResult, false),
		"RelationFollowList": kitex.NewMethodInfo(relationFollowListHandler, newRelationServiceRelationFollowListArgs, newRelationServiceRelationFollowListResult, false),
		"RelationFriendList": kitex.NewMethodInfo(relationFriendListHandler, newRelationServiceRelationFriendListArgs, newRelationServiceRelationFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin_relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyin_relation.RelationServiceRelationActionArgs)
	realResult := result.(*douyin_relation.RelationServiceRelationActionResult)
	success, err := handler.(douyin_relation.RelationService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationActionArgs() interface{} {
	return douyin_relation.NewRelationServiceRelationActionArgs()
}

func newRelationServiceRelationActionResult() interface{} {
	return douyin_relation.NewRelationServiceRelationActionResult()
}

func relationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyin_relation.RelationServiceRelationFollowListArgs)
	realResult := result.(*douyin_relation.RelationServiceRelationFollowListResult)
	success, err := handler.(douyin_relation.RelationService).RelationFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationFollowListArgs() interface{} {
	return douyin_relation.NewRelationServiceRelationFollowListArgs()
}

func newRelationServiceRelationFollowListResult() interface{} {
	return douyin_relation.NewRelationServiceRelationFollowListResult()
}

func relationFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyin_relation.RelationServiceRelationFriendListArgs)
	realResult := result.(*douyin_relation.RelationServiceRelationFriendListResult)
	success, err := handler.(douyin_relation.RelationService).RelationFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationFriendListArgs() interface{} {
	return douyin_relation.NewRelationServiceRelationFriendListArgs()
}

func newRelationServiceRelationFriendListResult() interface{} {
	return douyin_relation.NewRelationServiceRelationFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, req *douyin_relation.RelationActionRequest) (r *douyin_relation.RelationActionResponse, err error) {
	var _args douyin_relation.RelationServiceRelationActionArgs
	_args.Req = req
	var _result douyin_relation.RelationServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowList(ctx context.Context, req *douyin_relation.RelationFollowListRequest) (r *douyin_relation.RelationFollowListResponse, err error) {
	var _args douyin_relation.RelationServiceRelationFollowListArgs
	_args.Req = req
	var _result douyin_relation.RelationServiceRelationFollowListResult
	if err = p.c.Call(ctx, "RelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFriendList(ctx context.Context, req *douyin_relation.RelationFriendListRequest) (r *douyin_relation.RelationFriendListResponse, err error) {
	var _args douyin_relation.RelationServiceRelationFriendListArgs
	_args.Req = req
	var _result douyin_relation.RelationServiceRelationFriendListResult
	if err = p.c.Call(ctx, "RelationFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
